{"version":3,"sources":["../../src/client/index.ts","../../src/utils/utils.ts","../../src/client/client.ts"],"sourcesContent":["export * from './client';\nexport * from './types';\nexport * from './utils/utils';\n","export const isObject = (value:any) => typeof value === 'object' && value?.toString() === '[object Object]';\n\nexport const sql = (template: TemplateStringsArray, ...args: any[]) => {\n  return template.map((t, i) => t + (args[i] ?? '')).join('')\n}\n\nexport const snakeToCamelCase = (str: string): string => {\n  return str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n}\n\nexport const camelToSnakeCase = (str: string): string => {\n  return str.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);\n}\n\nexport const convertRecordKeysToCamelCase = (obj: Record<string, any>, ignoreKeys: string[] = []): Record<string, any> => {\n  if (typeof obj !== 'object' || obj === null) return obj;\n  if (Array.isArray(obj)) return obj.map(o => convertRecordKeysToCamelCase(o, ignoreKeys));\n  return Object.fromEntries(Object.entries(obj).map(([key, value]) => [\n    ignoreKeys.includes(key) ? key : snakeToCamelCase(key),\n    value?.toString() === '[object Object]' ? convertRecordKeysToCamelCase(value, ignoreKeys) : value\n  ]));\n}\n\nexport const convertRecordKeysToSnakeCase = (obj: Record<string, any>, ignoreKeys: string[] = []): Record<string, any> => {\n  if (typeof obj !== 'object' || obj === null) return obj;\n  if (Array.isArray(obj)) return obj.map(o => convertRecordKeysToSnakeCase(o, ignoreKeys));\n  return Object.fromEntries(Object.entries(obj).map(([key, value]) => [\n    ignoreKeys.includes(key) ? key : camelToSnakeCase(key),\n    value?.toString() === '[object Object]' ? convertRecordKeysToSnakeCase(value, ignoreKeys) : value\n  ]));\n}\n\nexport const mergeDeep = (target: any, source: any) => {\n  const output = { ...target };\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key) => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, { [key]: source[key] });\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, { [key]: source[key] });\n      }\n    });\n  }\n  return output;\n}\n\nexport const getUrl = (...paths: string[]) => {\n  const url = paths\n  .map(\n    p => p.trim()\n  )\n  .filter(Boolean)\n  .map(p => (\n    p.startsWith('/') ? p.slice(1) : p\n  ))\n  .map(p => p.endsWith('/') ? p.slice(0, -1) : p)\n  .join('/');\n  return url.endsWith('/') ? url.slice(0,-1) : url;\n}","import { API, APIConfig, ApiExtensionFunction } from \"../api\";\nimport { ApiClient, ApiClientConfig, ApiExtensions, ApiSchema } from \"./types\";\nimport { getUrl } from \"../utils\";\nimport { SchemaInput } from \"../schema\";\n\n/**\n * @description \n * Create a frontend client for the API, allowing easy access to the API's models and custom routes.\n * @example\n * ```ts\n  import { createClient } from \"squirrelify/client\";\n  import { extensions, config} from \"./api\";\n  import { schema } from \"./schema\";\n\n  const client = createClient({schema, extensions, config}, {\n    baseUrl: 'http://localhost:3000/',\n    headers: {\n      'Authorization': 'Bearer 1234567890',\n    }\n  });\n\n  client.models.posts.get('abc-12').then(r => console.log(r));\n\n  client.custom('example-users').post({\n    age: 20,\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n    id: 'abc-123',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n  }).then(r => console.log(r));\n  ```\n */\nexport const createClient = <S extends SchemaInput, E extends ApiExtensionFunction>(api:{schema:S, extensions:E, config:APIConfig}, config: ApiClientConfig) : ApiClient<API<S, E>> => {\n  config.baseUrl = getUrl(config.baseUrl, api.config.prefix ?? '')\n  const schema = api.schema;\n  const client:ApiClient<API<S, E>> = {\n    models: {},\n    custom: (route:keyof ApiExtensions<API<S, E>>) => ({\n      get: () => fetch(getUrl(route as string, config.baseUrl), {\n        method: 'GET',\n        headers: config.headers,\n      }).then(res => res.json()),\n      post: (data:any) => fetch(getUrl(route as string, config.baseUrl), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...config.headers,\n        },\n        body: JSON.stringify(data),\n      }).then(res => res.json()),\n      patch: (data:any) => fetch(getUrl(route as string, config.baseUrl), {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          ...config.headers,\n        },\n        body: JSON.stringify(data),\n      }).then(res => res.json()),\n      delete: () => fetch(getUrl(route as string, config.baseUrl), {\n        method: 'DELETE',\n      }).then(res => res.json()),\n      put: (data:any) => fetch(getUrl(route as string, config.baseUrl), {\n        method: 'PUT',\n        headers: {  \n          'Content-Type': 'application/json',\n          ...config.headers,\n        },\n        body: JSON.stringify(data),\n      }).then(res => res.json()),\n    })\n  } as any;\n\n  for (const key in schema) {\n    client.models[key as keyof ApiSchema<API<S, E>>] = {\n      get(id) {\n        const url = `${config.baseUrl}/${key as string}/${id}`;\n        return fetch(url, {\n          headers: config.headers,\n        }).then(res => res.json());\n      },\n      list(params) {\n        let url = `${config.baseUrl}/${key as string}`;\n        const searchParams = new URLSearchParams();\n        if (params.page) searchParams.set('page', params.page.toString());\n        if (params.limit) searchParams.set('limit', params.limit.toString());\n        if (params.filter) searchParams.set('filter', JSON.stringify(params.filter));\n        if (searchParams.size) url += `?${searchParams.toString()}`;\n        return fetch(url, {\n          headers: config.headers,\n          method: 'GET'\n        }).then(res => res.json()); \n      },\n      create(data) {\n        return fetch(`${config.baseUrl}/${key as string}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            ...config.headers,\n          },\n          body: JSON.stringify(data),\n        }).then(res => res.json());\n      },\n      update(id, data) {\n        return fetch(`${config.baseUrl}/${key as string}/${id}`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n            ...config.headers,\n          },\n          body: JSON.stringify(data),\n        }).then(res => res.json())  ;\n      },\n      delete(id) {\n        return fetch(`${config.baseUrl}/${key as string}/${id}`, {  \n          method: 'DELETE',\n        }).then(res => res.json());\n      },\n    } \n  }\n  return client;\n}\n\n"],"mappings":"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","names":[]}