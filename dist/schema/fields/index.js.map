{"version":3,"sources":["../../../src/schema/fields/fields.ts"],"sourcesContent":["import type { Field, CustomField, FieldOptions } from \"./types\";\n\nexport const SQL = <T>(sql:string) : CustomField<T> => ({type: '$', statement: sql})\n\n/**\n * @description\n * - Auto-incrementing integer primary key\n */\nexport const PK_AUTO_INT = (options?:FieldOptions<number,false>):Field<number,false> => ({\n    type: 'INTEGER',\n    options: {\n        ...options,\n        generatedAlwaysAsIdentity: true,\n        primaryKey: true,\n    }\n});\n\n/**\n * @description\n * - Auto-incrementing UUID primary key\n */\nexport const PK_AUTO_UUID = (options?:FieldOptions<string,false>):Field<string,false> => ({\n    type: 'UUID',\n    options: {\n        ...options,\n        primaryKey: true,\n        default: 'gen_random_uuid()',\n    }\n});\n\n/**\n * @description\n * - UUID\n */\nexport const UUID = <N extends boolean, A extends boolean>(options?:FieldOptions<string,N,A>):Field<string,N,A> => ({\n    type: 'UUID',\n    options\n});\n\n/**\n * @description\n * - Integer\n */\nexport const INTEGER = <N extends boolean, A extends boolean>(options?:FieldOptions<number,N,A>):Field<number,N,A> => <const>({\n    type: 'INTEGER',\n    options\n});\n\n/**\n * @description\n * - VARCHAR\n */\nexport const VARCHAR = <N extends boolean, A extends boolean>(value:number, options?:FieldOptions<string,N,A>):Field<string,N,A> => ({\n    type: 'VARCHAR',\n    argument: value,\n    options\n});\n\n/**\n * @description\n * - SERIAL\n */\nexport const SERIAL = <N extends boolean, A extends boolean>(options?:FieldOptions<number,N,A>):Field<number,N,A> => ({\n    type: 'SERIAL',\n    options\n});\n\n/**\n * @description\n * - TEXT\n */\nexport const TEXT = <N extends boolean, A extends boolean>(options?:FieldOptions<string,N,A>):Field<string,N,A> => ({\n    type: 'TEXT',\n    options\n});\n\n/**\n * @description\n * - BOOLEAN\n */\nexport const BOOLEAN = <N extends boolean, A extends boolean>(options?:FieldOptions<boolean,N,A>):Field<boolean,N,A> => ({\n    type: 'BOOLEAN',\n    options\n});\n\n/**\n * @description\n * - TIMESTAMP\n */\nexport const TIMESTAMP = <N extends boolean, A extends boolean>(options?:FieldOptions<string,N,A>):Field<string,N,A> => ({\n    type: 'TIMESTAMP',\n    options\n});\n\n/**\n * @description\n * - ENUM\n */\nexport const ENUM = <T extends readonly string[], N extends boolean>(value:T, options?:FieldOptions<T[number],N>) => ({\n    type: 'ENUM',\n    argument: value,\n    options\n});\n"],"mappings":";AAEO,IAAM,MAAM,CAAI,SAAiC,EAAC,MAAM,KAAK,WAAW,IAAG;AAM3E,IAAM,cAAc,CAAC,aAA6D;AAAA,EACrF,MAAM;AAAA,EACN,SAAS;AAAA,IACL,GAAG;AAAA,IACH,2BAA2B;AAAA,IAC3B,YAAY;AAAA,EAChB;AACJ;AAMO,IAAM,eAAe,CAAC,aAA6D;AAAA,EACtF,MAAM;AAAA,EACN,SAAS;AAAA,IACL,GAAG;AAAA,IACH,YAAY;AAAA,IACZ,SAAS;AAAA,EACb;AACJ;AAMO,IAAM,OAAO,CAAuC,aAAyD;AAAA,EAChH,MAAM;AAAA,EACN;AACJ;AAMO,IAAM,UAAU,CAAuC,aAAgE;AAAA,EAC1H,MAAM;AAAA,EACN;AACJ;AAMO,IAAM,UAAU,CAAuC,OAAc,aAAyD;AAAA,EACjI,MAAM;AAAA,EACN,UAAU;AAAA,EACV;AACJ;AAMO,IAAM,SAAS,CAAuC,aAAyD;AAAA,EAClH,MAAM;AAAA,EACN;AACJ;AAMO,IAAM,OAAO,CAAuC,aAAyD;AAAA,EAChH,MAAM;AAAA,EACN;AACJ;AAMO,IAAM,UAAU,CAAuC,aAA2D;AAAA,EACrH,MAAM;AAAA,EACN;AACJ;AAMO,IAAM,YAAY,CAAuC,aAAyD;AAAA,EACrH,MAAM;AAAA,EACN;AACJ;AAMO,IAAM,OAAO,CAAiD,OAAS,aAAwC;AAAA,EAClH,MAAM;AAAA,EACN,UAAU;AAAA,EACV;AACJ;","names":[]}