{"version":3,"sources":["../../../src/schema/fields/index.ts","../../../src/schema/fields/fields.ts"],"sourcesContent":["export * from './fields'\nexport * from './utils'\nexport * from './types'","import type { Field, CustomField, FieldOptions } from \"./types\";\n\nexport const defaults = {\n    \n}\n\nexport const SQL = <T>(sql:string) : CustomField<T> => ({type: '$', statement: sql})\n\n/**\n * @description\n * - Auto-incrementing integer primary key\n */\nexport const PK_AUTO_INT = (options?:FieldOptions<number,false>):Field<number,false> => ({\n    type: 'INTEGER',\n    options: {\n        ...options,\n        generatedAlwaysAsIdentity: true,\n        primaryKey: true,\n    }\n});\n\n/**\n * @description\n * - Auto-incrementing UUID primary key\n */\nexport const PK_AUTO_UUID = (options?:FieldOptions<string,false>):Field<string,false> => ({\n    type: 'UUID',\n    options: {\n        ...options,\n        primaryKey: true,\n        default: 'gen_random_uuid()',\n    }\n});\n\n/**\n * @description\n * - UUID\n */\nexport const UUID = <N extends boolean>(options?:FieldOptions<string,N>):Field<string,N> => ({\n    type: 'UUID',\n    options\n});\n\n/**\n * @description\n * - Integer\n */\nexport const INTEGER = <N extends boolean>(options?:FieldOptions<number,N>):Field<number,N> => <const>({\n    type: 'INTEGER',\n    options\n});\n\n/**\n * @description\n * - VARCHAR\n */\nexport const VARCHAR = <N extends boolean>(value:number, options?:FieldOptions<string,N>):Field<string,N> => ({\n    type: 'VARCHAR',\n    argument: value,\n    options\n});\n\n/**\n * @description\n * - SERIAL\n */\nexport const SERIAL = (options?:FieldOptions<number,false>):Field<number,false> => ({\n    type: 'SERIAL',\n    options\n});\n\n/**\n * @description\n * - TEXT\n */\nexport const TEXT = <N extends boolean>(options?:FieldOptions<string,N>):Field<string,N> => ({\n    type: 'TEXT',\n    options\n});\n\n/**\n * @description\n * - BOOLEAN\n */\nexport const BOOLEAN = <N extends boolean>(options?:FieldOptions<boolean,N>):Field<boolean,N> => ({\n    type: 'BOOLEAN',\n    options\n});\n\n/**\n * @description\n * - TIMESTAMP\n */\nexport const TIMESTAMP = <N extends boolean>(options?:FieldOptions<string,N>):Field<string,N> => ({\n    type: 'TIMESTAMP',\n    options\n});\n\n/**\n * @description\n * - ENUM\n */\nexport const ENUM = <T extends readonly string[], N extends boolean>(value:T, options?:FieldOptions<T[number],N>) => ({\n    type: 'ENUM',\n    argument: value,\n    options\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEO,IAAM,WAAW,CAExB;AAEO,IAAM,MAAM,CAAI,SAAiC,EAAC,MAAM,KAAK,WAAW,IAAG;AAM3E,IAAM,cAAc,CAAC,aAA6D;AAAA,EACrF,MAAM;AAAA,EACN,SAAS;AAAA,IACL,GAAG;AAAA,IACH,2BAA2B;AAAA,IAC3B,YAAY;AAAA,EAChB;AACJ;AAMO,IAAM,eAAe,CAAC,aAA6D;AAAA,EACtF,MAAM;AAAA,EACN,SAAS;AAAA,IACL,GAAG;AAAA,IACH,YAAY;AAAA,IACZ,SAAS;AAAA,EACb;AACJ;AAMO,IAAM,OAAO,CAAoB,aAAqD;AAAA,EACzF,MAAM;AAAA,EACN;AACJ;AAMO,IAAM,UAAU,CAAoB,aAA4D;AAAA,EACnG,MAAM;AAAA,EACN;AACJ;AAMO,IAAM,UAAU,CAAoB,OAAc,aAAqD;AAAA,EAC1G,MAAM;AAAA,EACN,UAAU;AAAA,EACV;AACJ;AAMO,IAAM,SAAS,CAAC,aAA6D;AAAA,EAChF,MAAM;AAAA,EACN;AACJ;AAMO,IAAM,OAAO,CAAoB,aAAqD;AAAA,EACzF,MAAM;AAAA,EACN;AACJ;AAMO,IAAM,UAAU,CAAoB,aAAuD;AAAA,EAC9F,MAAM;AAAA,EACN;AACJ;AAMO,IAAM,YAAY,CAAoB,aAAqD;AAAA,EAC9F,MAAM;AAAA,EACN;AACJ;AAMO,IAAM,OAAO,CAAiD,OAAS,aAAwC;AAAA,EAClH,MAAM;AAAA,EACN,UAAU;AAAA,EACV;AACJ;","names":[]}